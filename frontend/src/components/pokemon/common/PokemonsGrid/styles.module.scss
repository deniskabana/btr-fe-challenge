@use '@carbon/layout';
@use '@carbon/type';
@use '@carbon/themes';
@use '@carbon/colors';
@import '@/styles/variables';

.EntityGridView {
  padding: layout.$spacing-04 0 0;
}

.EntityGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(11rem, 1fr));
  grid-gap: layout.$spacing-04;
}

.ItemWrapper {
  position: relative;
}

.Image {
  width: 100%;
  height: 12rem;
  padding: layout.$spacing-04;
  background-color: white; // Those are JPEGs
  border-radius: $border-radius-default;
  overflow: hidden;
  position: relative;

  &::after {
    content: '';
    pointer-events: none;
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    width: 200%;
    height: 25%;
    opacity: 0.75;
    transition: none;
    background-image: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0),
      rgba(255, 255, 255, 0.8),
      rgba(255, 255, 255, 1),
      rgba(255, 255, 255, 0.7),
      rgba(255, 255, 255, 0)
    );
    transform: translate3d(-50%, -150%, 0) rotateZ(-25deg);
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transform: scale3d(1);
    transition: all $transition-duration-slow $transition-expressive;
  }
}

.ImageOverlay {
  @include type.type-style('body-02');

  position: absolute;
  inset: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: $font-weight-semibold;
  background-color: #{rgba(darken($color-secondary, 5%), 0.55)};
  color: white;
  pointer-events: none;
  transition: all $transition-duration-default $transition-productive;
  opacity: 0;
  z-index: 1;

  [data-dark-mode='true'] & {
    background-color: #{rgba(darken($color-secondary, 35%), 0.65)};
  }
}

.Name {
  @include type.type-style('heading-compact-02');

  color: $color-secondary !important;
  margin-bottom: layout.$spacing-02;

  &:hover,
  &:focus {
    text-decoration: underline;
  }
}

.GridItem {
  display: flex;
  flex-direction: column;
  padding: layout.$spacing-03;
  padding-bottom: layout.$spacing-04;
  gap: layout.$spacing-04;
  border-radius: $border-radius-default;
  border: 1px solid $border-color-lighter;
  transition: all $transition-duration-default $transition-expressive;
  box-shadow: $box-shadow-mini;

  a {
    text-decoration: none;
    color: var(--cds-text-primary);

    &:hover,
    &:focus {
      img {
        transform: scale3d(1.05, 1.05, 1);
      }

      .Image::after {
        transform: translate3d(-10%, 500%, 0) rotateZ(-25deg) scale3d(1.15, 1.15, 1);
        opacity: 1;
        transition: transform 0.3s ease-in;
      }

      .ImageOverlay {
        opacity: 1;
        backdrop-filter: blur(1px) saturate(30%);
      }

      .Name {
        text-decoration: underline;
      }
    }
  }

  [data-dark-mode='true'] & {
    background: themes.$layer-02;
  }
}

.FavoriteButton {
  $color: colors.$red-50;

  padding-top: 0;
  border: 1px solid $color !important;
  display: flex;
  align-items: center;
  background-color: transparent !important;

  &:hover,
  &:focus,
  &:active {
    background-color: $color;
  }

  svg {
    width: 65%;
    height: 65%;

    * {
      fill: $color;
    }
  }
}

.MetaWrapper {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;

  > *:first-child {
    flex-grow: 1;
  }
}

.Types {
  @include type.type-style('body-compact-01');
}
